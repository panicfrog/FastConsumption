//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `arrow_black`.
    static let arrow_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_black")
    /// Image `arrow_white`.
    static let arrow_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_white")
    /// Image `bg`.
    static let bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `oval_icon`.
    static let oval_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "oval_icon")
    /// Image `password_icon`.
    static let password_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "password_icon")
    /// Image `phone_icon`.
    static let phone_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone_icon")
    /// Image `selected_icon`.
    static let selected_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_icon")
    /// Image `valid_icon`.
    static let valid_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "valid_icon")
    
    /// `UIImage(named: "arrow_black", bundle: ..., traitCollection: ...)`
    static func arrow_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_white", bundle: ..., traitCollection: ...)`
    static func arrow_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg", bundle: ..., traitCollection: ...)`
    static func bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "oval_icon", bundle: ..., traitCollection: ...)`
    static func oval_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "password_icon", bundle: ..., traitCollection: ...)`
    static func password_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "phone_icon", bundle: ..., traitCollection: ...)`
    static func phone_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected_icon", bundle: ..., traitCollection: ...)`
    static func selected_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "valid_icon", bundle: ..., traitCollection: ...)`
    static func valid_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.valid_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginingStoryboard`.
    static let loginingStoryboard = _R.storyboard.loginingStoryboard()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LoginingStoryboard", bundle: ...)`
    static func loginingStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginingStoryboard)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try loginingStoryboard.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct loginingStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "LoginingStoryboard"
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let resetPasswordViewController = StoryboardViewControllerResource<ResetPasswordViewController>(identifier: "ResetPasswordViewController")
      let retrievePasswordViewController = StoryboardViewControllerResource<RetrievePasswordViewController>(identifier: "RetrievePasswordViewController")
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }
      
      func resetPasswordViewController(_: Void = ()) -> ResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordViewController)
      }
      
      func retrievePasswordViewController(_: Void = ()) -> RetrievePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: retrievePasswordViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "phone_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone_icon' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password_icon' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "oval_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'oval_icon' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selected_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_icon' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "valid_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'valid_icon' is used in storyboard 'LoginingStoryboard', but couldn't be loaded.") }
        if _R.storyboard.loginingStoryboard().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'LoginingStoryboard' as 'RegisterViewController'.") }
        if _R.storyboard.loginingStoryboard().resetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordViewController' could not be loaded from storyboard 'LoginingStoryboard' as 'ResetPasswordViewController'.") }
        if _R.storyboard.loginingStoryboard().retrievePasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'retrievePasswordViewController' could not be loaded from storyboard 'LoginingStoryboard' as 'RetrievePasswordViewController'.") }
        if _R.storyboard.loginingStoryboard().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginingStoryboard' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
